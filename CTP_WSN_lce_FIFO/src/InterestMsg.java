/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'InterestMsg'
 * message type.
 */

public class InterestMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 20;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = -1;

    /** Create a new InterestMsg of size 20. */
    public InterestMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new InterestMsg of the given data_length. */
    public InterestMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InterestMsg with the given data_length
     * and base offset.
     */
    public InterestMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InterestMsg using the given byte array
     * as backing store.
     */
    public InterestMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InterestMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public InterestMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InterestMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public InterestMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InterestMsg embedded in the given message
     * at the given base offset.
     */
    public InterestMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new InterestMsg embedded in the given message
     * at the given base offset and length.
     */
    public InterestMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <InterestMsg> \n";
      try {
        s += "  [msgType=0x"+Long.toHexString(get_msgType())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [msgName.ability.leftUp.x=0x"+Long.toHexString(get_msgName_ability_leftUp_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [msgName.ability.leftUp.y=0x"+Long.toHexString(get_msgName_ability_leftUp_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [msgName.ability.rightDown.x=0x"+Long.toHexString(get_msgName_ability_rightDown_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [msgName.ability.rightDown.y=0x"+Long.toHexString(get_msgName_ability_rightDown_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [msgName.dataType=0x"+Long.toHexString(get_msgName_dataType())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data=0x"+Long.toHexString(get_data())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nouse=0x"+Long.toHexString(get_nouse())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msgType
    //   Field type: long, unsigned
    //   Offset (bits): 0
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msgType' is signed (false).
     */
    public static boolean isSigned_msgType() {
        return false;
    }

    /**
     * Return whether the field 'msgType' is an array (false).
     */
    public static boolean isArray_msgType() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msgType'
     */
    public static int offset_msgType() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msgType'
     */
    public static int offsetBits_msgType() {
        return 0;
    }

    /**
     * Return the value (as a long) of the field 'msgType'
     */
    public long get_msgType() {
        return (long)getUIntElement(offsetBits_msgType(), 32);
    }

    /**
     * Set the value of the field 'msgType'
     */
    public void set_msgType(long value) {
        setUIntElement(offsetBits_msgType(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'msgType'
     */
    public static int size_msgType() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msgType'
     */
    public static int sizeBits_msgType() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msgName.ability.leftUp.x
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msgName.ability.leftUp.x' is signed (false).
     */
    public static boolean isSigned_msgName_ability_leftUp_x() {
        return false;
    }

    /**
     * Return whether the field 'msgName.ability.leftUp.x' is an array (false).
     */
    public static boolean isArray_msgName_ability_leftUp_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msgName.ability.leftUp.x'
     */
    public static int offset_msgName_ability_leftUp_x() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msgName.ability.leftUp.x'
     */
    public static int offsetBits_msgName_ability_leftUp_x() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'msgName.ability.leftUp.x'
     */
    public int get_msgName_ability_leftUp_x() {
        return (int)getUIntElement(offsetBits_msgName_ability_leftUp_x(), 16);
    }

    /**
     * Set the value of the field 'msgName.ability.leftUp.x'
     */
    public void set_msgName_ability_leftUp_x(int value) {
        setUIntElement(offsetBits_msgName_ability_leftUp_x(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'msgName.ability.leftUp.x'
     */
    public static int size_msgName_ability_leftUp_x() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msgName.ability.leftUp.x'
     */
    public static int sizeBits_msgName_ability_leftUp_x() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msgName.ability.leftUp.y
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msgName.ability.leftUp.y' is signed (false).
     */
    public static boolean isSigned_msgName_ability_leftUp_y() {
        return false;
    }

    /**
     * Return whether the field 'msgName.ability.leftUp.y' is an array (false).
     */
    public static boolean isArray_msgName_ability_leftUp_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msgName.ability.leftUp.y'
     */
    public static int offset_msgName_ability_leftUp_y() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msgName.ability.leftUp.y'
     */
    public static int offsetBits_msgName_ability_leftUp_y() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'msgName.ability.leftUp.y'
     */
    public int get_msgName_ability_leftUp_y() {
        return (int)getUIntElement(offsetBits_msgName_ability_leftUp_y(), 16);
    }

    /**
     * Set the value of the field 'msgName.ability.leftUp.y'
     */
    public void set_msgName_ability_leftUp_y(int value) {
        setUIntElement(offsetBits_msgName_ability_leftUp_y(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'msgName.ability.leftUp.y'
     */
    public static int size_msgName_ability_leftUp_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msgName.ability.leftUp.y'
     */
    public static int sizeBits_msgName_ability_leftUp_y() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msgName.ability.rightDown.x
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msgName.ability.rightDown.x' is signed (false).
     */
    public static boolean isSigned_msgName_ability_rightDown_x() {
        return false;
    }

    /**
     * Return whether the field 'msgName.ability.rightDown.x' is an array (false).
     */
    public static boolean isArray_msgName_ability_rightDown_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msgName.ability.rightDown.x'
     */
    public static int offset_msgName_ability_rightDown_x() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msgName.ability.rightDown.x'
     */
    public static int offsetBits_msgName_ability_rightDown_x() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'msgName.ability.rightDown.x'
     */
    public int get_msgName_ability_rightDown_x() {
        return (int)getUIntElement(offsetBits_msgName_ability_rightDown_x(), 16);
    }

    /**
     * Set the value of the field 'msgName.ability.rightDown.x'
     */
    public void set_msgName_ability_rightDown_x(int value) {
        setUIntElement(offsetBits_msgName_ability_rightDown_x(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'msgName.ability.rightDown.x'
     */
    public static int size_msgName_ability_rightDown_x() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msgName.ability.rightDown.x'
     */
    public static int sizeBits_msgName_ability_rightDown_x() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msgName.ability.rightDown.y
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msgName.ability.rightDown.y' is signed (false).
     */
    public static boolean isSigned_msgName_ability_rightDown_y() {
        return false;
    }

    /**
     * Return whether the field 'msgName.ability.rightDown.y' is an array (false).
     */
    public static boolean isArray_msgName_ability_rightDown_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msgName.ability.rightDown.y'
     */
    public static int offset_msgName_ability_rightDown_y() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msgName.ability.rightDown.y'
     */
    public static int offsetBits_msgName_ability_rightDown_y() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'msgName.ability.rightDown.y'
     */
    public int get_msgName_ability_rightDown_y() {
        return (int)getUIntElement(offsetBits_msgName_ability_rightDown_y(), 16);
    }

    /**
     * Set the value of the field 'msgName.ability.rightDown.y'
     */
    public void set_msgName_ability_rightDown_y(int value) {
        setUIntElement(offsetBits_msgName_ability_rightDown_y(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'msgName.ability.rightDown.y'
     */
    public static int size_msgName_ability_rightDown_y() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msgName.ability.rightDown.y'
     */
    public static int sizeBits_msgName_ability_rightDown_y() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msgName.dataType
    //   Field type: long, unsigned
    //   Offset (bits): 96
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msgName.dataType' is signed (false).
     */
    public static boolean isSigned_msgName_dataType() {
        return false;
    }

    /**
     * Return whether the field 'msgName.dataType' is an array (false).
     */
    public static boolean isArray_msgName_dataType() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msgName.dataType'
     */
    public static int offset_msgName_dataType() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msgName.dataType'
     */
    public static int offsetBits_msgName_dataType() {
        return 96;
    }

    /**
     * Return the value (as a long) of the field 'msgName.dataType'
     */
    public long get_msgName_dataType() {
        return (long)getUIntElement(offsetBits_msgName_dataType(), 32);
    }

    /**
     * Set the value of the field 'msgName.dataType'
     */
    public void set_msgName_dataType(long value) {
        setUIntElement(offsetBits_msgName_dataType(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'msgName.dataType'
     */
    public static int size_msgName_dataType() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msgName.dataType'
     */
    public static int sizeBits_msgName_dataType() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data' is signed (false).
     */
    public static boolean isSigned_data() {
        return false;
    }

    /**
     * Return whether the field 'data' is an array (false).
     */
    public static boolean isArray_data() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data'
     */
    public static int offset_data() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data'
     */
    public static int offsetBits_data() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'data'
     */
    public int get_data() {
        return (int)getUIntElement(offsetBits_data(), 16);
    }

    /**
     * Set the value of the field 'data'
     */
    public void set_data(int value) {
        setUIntElement(offsetBits_data(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data'
     */
    public static int size_data() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data'
     */
    public static int sizeBits_data() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nouse
    //   Field type: int, unsigned
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nouse' is signed (false).
     */
    public static boolean isSigned_nouse() {
        return false;
    }

    /**
     * Return whether the field 'nouse' is an array (false).
     */
    public static boolean isArray_nouse() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nouse'
     */
    public static int offset_nouse() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nouse'
     */
    public static int offsetBits_nouse() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'nouse'
     */
    public int get_nouse() {
        return (int)getUIntElement(offsetBits_nouse(), 16);
    }

    /**
     * Set the value of the field 'nouse'
     */
    public void set_nouse(int value) {
        setUIntElement(offsetBits_nouse(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nouse'
     */
    public static int size_nouse() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nouse'
     */
    public static int sizeBits_nouse() {
        return 16;
    }

}
